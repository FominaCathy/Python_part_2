'''
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ5
üìå –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞: ‚Äú1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù, ‚Äú3-—è —Å—Ä–µ–¥–∞ –º–∞—è‚Äù –∏ —Ç.–ø.
üìå –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.
üìå –õ–æ–≥–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.

üìå –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
üìå –ü—Ä–∏ —ç—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–µ—Ä—ë—Ç—Å—è –ø–µ—Ä–≤—ã–π –≤ –º–µ—Å—è—Ü–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —Ç–µ–∫—É—â–∏–π
–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏/–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
üìå *–ù–∞—É—á–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–∞, –Ω–æ –∏ —á–∏—Å–ª–æ–≤—ã–µ, —Ç.–µ –Ω–µ –º–∞—è, –∞ 5.
'''
import argparse
from datetime import datetime
import logging


def convert(text: str):
    try:
        number, week_day, month = text.split()
        week = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        months = ['', '—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫']

        wd = int(week_day) if week_day.isdigit() else week.index(week_day)
        number = int(number[0])
        cur_month = int(month) if month.isdigit() else months.index(month[:3])
        cur_year = datetime.now().year
        count = 0

        for item in range(1, 32):
            cur_date = datetime(day=item, month=cur_month, year=cur_year)
            if cur_date.weekday() == wd:
                count += 1
                if count == number:
                    logger.info(f'–¥–∞—Ç–∞: "{cur_date}"')
                    return cur_date
    except Exception as ex:
        logger.error(f'–Ω–µ–∫–æ—Ä—Ä–µ—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: "{text}", error: {ex}')
        print('–Ω–µ–∫–æ—Ä—Ä–µ—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
        return

    logger.warning(f'–Ω–µ–∫–æ—Ä—Ä–µ—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: "{text}", —Ç–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ—Ç')


if __name__ == '__main__':
    logging.basicConfig(filename='logger_date.log', style='{', filemode='a', encoding='utf-8', level=logging.NOTSET)
    logger = logging.getLogger(__name__)

    parser = argparse.ArgumentParser(description='my')
    parser.add_argument('-n', metavar='n', type=str, default=1, help='–Ω–æ–º–µ—Ä –≤—Ö–æ–∂–¥–µ–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1-–π"')
    parser.add_argument('-w', metavar='w', type=str, default=datetime.now().weekday(), help='–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –ª–∏–±–æ –µ–≥–æ –Ω–æ–º–µ—Ä (0-–ø–æ–Ω–µ–¥, 6- –≤–æ—Å–∫—Ä)')
    parser.add_argument('-m', metavar='m', type=str, default=datetime.now().month, help='–Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –ª–∏–±–æ –µ–≥–æ –Ω–æ–º–µ—Ä: 1- —è–Ω–≤–∞—Ä—å, 12-–¥–µ–∫–∞–±—Ä—å')

    args = parser.parse_args()
    txt = f"{args.n} {args.w} {args.m}"

    print(f'{convert(txt)}')
